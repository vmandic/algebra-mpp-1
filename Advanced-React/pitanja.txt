1. Preporučen način renderiranja Rute ( 
<Route path="/about" component = {About}/>
<Route path="/about" render={(props) => <div>About</div>}/>
 <Route path="/about" children={(props) => <div>Always Rendered</div>}/>)


2. Korištenje metode children?


3. Kada se koristi Switch komponeneta kada ne?


4. DefaultRoute. Ruta home, 404 ili sl?


5.const App = () => (
  <div>
    <BrowserRouter> 
      <Switch>
        <Route path="/" component = {A}/>
        <Route path="/abc" component = {B}/>
        <Route path="/def" component = {C}/>
        <Route path="/ghi" component = {D}/>
      </Switch>
    </BrowserRouter>
  </div>
);
Which components will render when the URL path is /def?

6.My advice is to not use Redux if you can accomplish your project with plain old React. If it gets too annoying to pass down state through parent components to child components, or if you have too many types of event handlers to keep track of, then it might be a good idea to use Redux. Redux was designed for complicated applications like Facebook or Twitter. If you are making a simple todo app then you probably don't need Redux.

Može konkretne primjere kada koristiti Redux?


7. Store. Kada je previše info u njemu? Store u praksi?


8. Actions - Više o payload-ima(Reducer figures out what to do with the action type and payload and updates the state accordingly.)


9. Actions i action creators. Kada se koji koristi
 //action
var action = {
  type: ADD_ITEM,
  item: "apple"
};

//action creator
const addItem = item => {
  return {
    type: ADD_ITEM,
    item: item
  };
};


10.import { combineReducers } from "redux";


